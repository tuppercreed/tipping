BEGIN;

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE tournament_round (
    round_year INTEGER DEFAULT EXTRACT(YEAR FROM CURRENT_TIMESTAMP),
    round_number INTEGER,
    round_name TEXT NOT NULL,
    PRIMARY KEY(round_year, round_number)
);

CREATE TABLE team (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_name TEXT NOT NULL,
    abbreviation TEXT,
    UNIQUE (team_name)
);

CREATE TABLE game (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    venue TEXT NOT NULL,
    scheduled TIMESTAMP(3),
    round_year INTEGER NOT NULL,
    round_number INTEGER NOT NULL,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    complete BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (round_year, round_number) REFERENCES tournament_round (round_year, round_number) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE game_team (
    game_id INTEGER NOT NULL REFERENCES game ON DELETE RESTRICT ON UPDATE CASCADE,
    team_id INTEGER NOT NULL REFERENCES team ON DELETE RESTRICT ON UPDATE CASCADE,
    home BOOLEAN NOT NULL,
    goals INTEGER DEFAULT 0,
    behinds INTEGER DEFAULT 0,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (game_id, team_id),
    UNIQUE (game_id, home)

);

CREATE TRIGGER set_timestamp_game
BEFORE UPDATE ON game
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_game_team
BEFORE UPDATE ON game_team
FOR EACH ROW 
EXECUTE FUNCTION trigger_set_timestamp();

CREATE FUNCTION game_started(scheduled TIMESTAMP(3))
RETURNS BOOLEAN
AS
$$
    SELECT (CURRENT_TIMESTAMP > scheduled)
$$
LANGUAGE SQL;

CREATE TABLE competition (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    competition_name TEXT NOT NULL,
    avatar_url TEXT,
    website TEXT,
    time_zone TEXT,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE person (
    id UUID REFERENCES auth.users PRIMARY KEY,
    username TEXT NOT NULL,
    avatar_url TEXT,
    website TEXT,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(3) NOT NULL,

    UNIQUE (username),
    CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

CREATE TABLE tip (
    person_id UUID REFERENCES person ON DELETE RESTRICT ON UPDATE CASCADE,
    game_id INTEGER NOT NULL,
    team_id INTEGER NOT NULL,
    FOREIGN KEY (game_id, team_id) REFERENCES game_team (game_id, team_id) ON DELETE RESTRICT ON UPDATE CASCADE,

    PRIMARY KEY (person_id, game_id)
);

CREATE TABLE competitions_persons (
    competition_id INTEGER REFERENCES competition ON DELETE RESTRICT ON UPDATE CASCADE,
    person_id UUID REFERENCES person ON DELETE RESTRICT ON UPDATE CASCADE,
    PRIMARY KEY (competition_id, person_id)
);

-- Profile permissions
ALTER TABLE person ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON person FOR SELECT USING ( TRUE );
CREATE POLICY "Users can insert their own profile." ON person FOR INSERT WITH CHECK ( auth.uid() = id );
CREATE POLICY "Users can update their own profile." ON person FOR UPDATE WITH CHECK ( auth.uid() = id );

-- Profile photos
INSERT INTO storage.buckets (id, name) VALUES ('avatars', 'avatars');
-- CREATE POLICY IF NOT EXISTS "Avatar images are public." ON storage.objects FOR SELECT USING ( bucket_id = 'avatars');
-- CREATE POLICY IF NOT EXISTS "Anyone can upload an avatar." ON storage.objects FOR INSERT WITH CHECK ( bucket_id = 'avatars'); 

-- Competition permissions
ALTER TABLE competition ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can create a competition." ON competition FOR INSERT WITH CHECK ( auth.role() = 'authenticated');
CREATE POLICY "Members can update competition details." ON competition FOR UPDATE USING (
    auth.uid() in (
        SELECT person_id FROM competitions_persons WHERE competition_id = id
    )
);

-- Tipping
ALTER TABLE tip ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can add tips." ON tip FOR INSERT WITH CHECK (auth.uid() = person_id AND game_id in (
    SELECT id FROM game WHERE game_started(scheduled) IS NOT TRUE
));
CREATE POLICY "Users can see tips." ON tip FOR SELECT USING (auth.uid() = person_id);
CREATE POLICY "Users can update tips." ON tip FOR UPDATE USING (TRUE) WITH CHECK (auth.uid() = person_id AND game_id in (
    SELECT id FROM game WHERE game_started(scheduled) IS NOT TRUE
));
CREATE POLICY "Users can delete tips." ON tip FOR DELETE WITH CHECK (auth.uid() = person_id AND game_id in (
    SELECT id FROM game WHERE game_started(scheduled) IS NOT TRUE
));

COMMIT;