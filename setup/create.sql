CREATE TABLE tournament_round (
    round_year INTEGER DEFAULT EXTRACT(YEAR FROM CURRENT_TIMESTAMP),
    round_number INTEGER,
    round_name TEXT NOT NULL,
    PRIMARY KEY(round_year, round_number)
);

CREATE TABLE team (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_name TEXT NOT NULL,
    abbreviation TEXT,
    UNIQUE (team_name)
);

CREATE TABLE game_team (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    team_id INTEGER NOT NULL REFERENCES team ON DELETE RESTRICT ON UPDATE CASCADE,
    game_id INTEGER,
    goals INTEGER DEFAULT 0,
    behinds INTEGER DEFAULT 0
);

CREATE TABLE game (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    venue TEXT NOT NULL,
    scheduled TIMESTAMP(3),
    round_year INTEGER NOT NULL,
    round_number INTEGER NOT NULL,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(3) NOT NULL,
    complete BOOLEAN NOT NULL DEFAULT FALSE,
    home_team_id INTEGER NOT NULL REFERENCES game_team ON DELETE RESTRICT ON UPDATE CASCADE,
    away_team_id INTEGER NOT NULL REFERENCES game_team ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (round_year, round_number) REFERENCES tournament_round (round_year, round_number) ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT two_teams CHECK (home_team_id != away_team_id),
    UNIQUE (round_year, round_number, home_team_id),
    UNIQUE (round_year, round_number, away_team_id)
);

ALTER TABLE game_team ADD CONSTRAINT game_constraint FOREIGN KEY (game_id) REFERENCES game (id) ON DELETE RESTRICT ON UPDATE CASCADE;

CREATE FUNCTION game_started(scheduled TIMESTAMP(3))
RETURNS BOOLEAN
AS
$$
    SELECT (CURRENT_TIMESTAMP > scheduled)
$$
LANGUAGE SQL;

CREATE TABLE competition (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    competition_name TEXT NOT NULL,
    avatar_url TEXT,
    website TEXT,
    time_zone TEXT,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE person (
    id UUID REFERENCES auth.users PRIMARY KEY,
    username TEXT NOT NULL,
    avatar_url TEXT,
    website TEXT,
    created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(3) NOT NULL,

    UNIQUE (username),
    CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

CREATE TABLE tip (
    person_id UUID REFERENCES person ON DELETE RESTRICT ON UPDATE CASCADE,
    game_team_id INTEGER REFERENCES game_team ON DELETE RESTRICT ON UPDATE RESTRICT,

    PRIMARY KEY (person_id, game_team_id)
);

CREATE TABLE competitions_persons (
    competition_id INTEGER REFERENCES competition ON DELETE RESTRICT ON UPDATE CASCADE,
    person_id UUID REFERENCES person ON DELETE RESTRICT ON UPDATE CASCADE,
    PRIMARY KEY (competition_id, person_id)
);

-- Profile permissions
ALTER TABLE person ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON person FOR SELECT USING ( TRUE );
CREATE POLICY "Users can insert their own profile." ON person FOR INSERT WITH CHECK ( auth.uid() = id );
CREATE POLICY "Users can update their own profile." ON person FOR UPDATE WITH CHECK ( auth.uid() = id );

-- Profile photos
INSERT INTO storage.buckets (id, name) VALUES ('avatars', 'avatars');
CREATE POLICY "Avatar images are public." ON storage.objects FOR SELECT USING ( bucket_id = 'avatars');
CREATE POLICY "Anyone can upload an avatar." ON storage.objects FOR INSERT WITH CHECK ( bucket_id = 'avatars'); 

-- Competition permissions
ALTER TABLE competition ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can create a competition." ON competition FOR INSERT WITH CHECK ( auth.role() = 'authenticated');
CREATE POLICY "Members can update competition details." ON competition FOR UPDATE USING (
    auth.uid() in (
        SELECT person_id FROM competitions_persons WHERE competition_id = id
    )
);

-- Tipping
ALTER TABLE tip ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can add tips." ON tip FOR INSERT WITH CHECK (auth.uid() = person_id AND game_team_id in (
    SELECT game_team_id FROM game_team INNER JOIN game ON game_team.game_id = game.id WHERE game_started(scheduled) IS NOT TRUE
));